<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="video">

	<!-- 게시글 등록 -->
	<insert id="insertVideo" parameterType="com.sp.catdog.doctor.video.Video">
		INSERT INTO vetVideo(vidNum, userId, vidSubject, vidContent, vidUrl, 
			vidThumb, vidHitCount, vidCreated) VALUES (
			vetVideo_seq.NEXTVAL, #{userId}, #{vidSubject}, #{vidContent}, #{vidUrl}, 
			#{vidThumb, jdbcType=VARCHAR}, 0, SYSDATE )			
	</insert>
	
	<sql id="where-list">
		<choose>
			<when test="condition=='all' ">
				( INSTR(vidSubject, #{keyword}) &gt; 0
					OR INSTR(vidContent, #{keyword}) &gt; 0 )
			</when>
			<when test="condition=='vidSubject'">
				INSTR(vidSubject, #{keyword}) &gt; 0
			</when>
			<when test="condition=='vidContent;">
				INSTR(content, #{keyword}) &gt; 0
			</when>
			<when test="condition=='userName'">
				userName=#{keyword}
			</when>
			<when test="condition=='created'">
				( TO_CHAR(v.created, 'YYYY-MM-DD') = #{keyword}
					OR TO_CHAR(v.created, 'YYYY-MM-DD') =  #{keyword} )
			</when>
			<otherwise>
			    INSTR(${condition}, #{keyword}) &gt; 0
			</otherwise>
		</choose>
	</sql>
	<!-- 글 개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0 )
		FROM vetVideo v
		JOIN member1 m ON v.userId=m.userId
		<where>
			<if test="keyword!=null and keyword!='' ">
				<include refid="where-list"/>
			</if>
		</where>
	</select>
	
	<!-- 글 목록 -->
	<select id="listVideo" parameterType="map" resultType="com.sp.catdog.doctor.video.Video">
		SELECT b.vidNum, b.userId, userName, vidSubject,
				TO_CHAR(b.vidCreated, 'YYYY-MM-DD'),
				vidHitCount, vidThumb,
				NVL(vidReplyCount, 0) vidReplyCount
		FROM vetVideo b
		JOIN member1 m on b.userId =  m.userId
		LEFT OUTER JOIN(
			SELECT vidNum, COUNT(*) vidReplyCount FROM vetVidReply
			WHERE vidReplyType = 0
			GROUP BY vidNum
		) c ON b.vidNum=c.vidNum
		<where>
			<if test="keyword != null and keyword !=''">
				<include refid="where-list"/>
			</if>
		</where>
		ORDER BY vidNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	
	<!-- 글보기 -->
	<select id="readVideo" parameterType="Integer" resultType="com.sp.catdog.doctor.video.Video">
		SELECT v.vidNum, v.userId, userName, vidSubject, vidThumb, 
			vidHitCount, vidContent, vidCreated, vidUrl, NVL(videoLikeCount, 0) videoLikeCount
		FROM vetVideo v
		JOIN member1 m ON v.userId =  m.userId
		LEFT OUTER JOIN (
			SELECT vidNum, COUNT(*) videoLikeCount FROM vetVidLike
			GROUP BY vidNum
		) bc ON v.vidNum = bc.vidNum
		WHERE v.vidNum=#{vidNum}
	</select>
	
	<!-- 조회수 증가 -->
	<update id="updateHitCount" parameterType="Integer">
		UPDATE vetVideo SET vidHitCount=vidHitCount+1 WHERE vidNum=#{vidNum}
	</update>
	
	<!-- 이전글  -->
	<select id="preReadVideo" parameterType="map" resultType="com.sp.catdog.doctor.video.Video">
		SELECT vidNum, vidSubject 
		FROM vetVideo v
		JOIN member1 m ON v.userId=m.userId
		<where>
			<if test="keyword!=null and keyword!='' ">
				<include refid="where-list"/>
			</if>
			AND (vidNum &gt; #{vidNum})
		</where>
		ORDER BY vidNum ASC
		FETCH FIRST 1 ROWS ONLY
	</select>
	<!-- 다음글  -->
	<select id="nextReadVideo" parameterType="map" resultType="com.sp.catdog.doctor.video.Video">
		SELECT vidNum, vidSubject
		FROM vetVideo v
		JOIN member1 m ON v.userId=m.userId
		<where>
			<if test="keyword!=null and keyword!='' ">
				<include refid="where-list"/>
			</if>
			AND (vidNum &lt; #{vidNum})
		</where>
		ORDER BY vidNum DESC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	<!-- 수정 -->
	<update id="updateVideo" parameterType="com.sp.catdog.doctor.video.Video">
		UPDATE vetVideo SET vidSubject=#{vidSubject},vidContent=#{vidContent}, 
		vidThumb=#{vidThumb, jdbcType=VARCHAR}, vidUrl=#{vidUrl}
		WHERE vidNum=#{vidNum}
	</update>
	
	<!-- 삭제 -->
	<delete id="deleteVideo" parameterType="Integer">
		DELETE FROM vetVideo WHERE vidNum=#{vidNum}
	</delete>
	
	<!-- 게시글 좋아요 -->
	<insert id="insertVideoLike" parameterType="map">
		INSERT INTO vetVidLike(vidNum, userId) VALUES (#{vidNum}, #{userId})
	</insert>
	
	<!-- 게시글 좋아요 개수 -->
	<select id="videoLikeCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM vetVidLike WHERE vidNum=#{vidNum}
	</select>
	
	<!-- 댓글 -->
	<select id="insertReply" parameterType="com.sp.catdog.doctor.video.Reply">
		INSERT INTO vetVidReply(vidReplyNum, vidNum, userId, vidReplyContent, vidReplyType, vidReplyCreated)
			VALUES(vetVidReply_seq.NEXTVAL, #{vidNum}, #{userId},
			#{vidReplyContent}, #{vidReplyType}, SYSDATE)
	</select>
	
	<!-- 댓글개수 -->
	<select id="replyCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) FROM vetVidReply
		WHERE vidNum=#{vidNum} AND vidReplyType=0
	</select>
	
	<!-- 댓글 리스트 -->
	<select id="listReply" parameterType="map" resultType="com.sp.catdog.doctor.video.Reply">
		SELECT r.vidReplyNum, r.userId, userName, vidNum, r.vidReplyContent, r.vidReplyCreated,
				NVL(answerCount, 0) answerCount,
				NVL(likeCount, 0) likeCount
		FROM vetVidReply r
		JOIN member1 m ON r.userId= m.userId
		LEFT OUTER JOIN (
			SELECT vidReplyType, COUNT(*) answerCount
			FROM vetVidReply WHERE vidReplyType!=0 
			GROUP BY vidReplyType
		) t ON r.vidReplyNum = t.vidReplyType
		LEFT OUTER JOIN (
			SELECT vidReplyNum, COUNT(DECODE(vidReplyLike, 1, 1)) likeCount
			FROM vetReplyLike 
			GROUP BY vidReplyNum
		) c ON r.vidReplyNum = c.vidReplyNum
		WHERE vidNum=#{vidNum} AND r.vidReplyType=0
		ORDER BY r.vidReplyNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>	
	
	<!-- 댓글 및 답글 삭제 -->
	<delete id="deleteReply" parameterType="map">
		DELETE FROM vetVidReply
		WHERE vidReplyNum=#{vidReplyNum}
		<if test="mode=='reply'">
			OR vidReplyType=#{vidReplyNum}
		</if>	
	</delete>
	
	<!-- 댓글의 답글 리스트  -->
	<select id="listReplyAnswer" parameterType="map" resultType="com.sp.catdog.doctor.video.Reply">
		SELECT vidReplyNum, vidNum, r.userId, userName, vidReplyContent, vidReplyCreated, vidReplyType 
		FROM vetVidReply r
		JOIN member1 m ON r.userId = m.userId
		WHERE vidReplyType = #{vidReplyType}
		ORDER BY vidReplyNum DESC
	</select>
	
	<!-- 댓글의 답글 개수 -->
	<select id="replyAnswerCount" parameterType="Integer" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM vetVidReply WHERE vidReplyType = #{vidReplyType}
	</select>

	<!-- 댓글의 좋아요 추가  -->
	<select id="insertReplyLike" parameterType="map">
		INSERT INTO vetReplyLike(vidReplyNum, userId, vidReplyLike)
			VALUES (#{vidReplyNum}, #{userId}, #{vidReplyLike})
	</select>
	
	<!-- 댓글의 좋아요 개수 -->
	<select id="replyLikeCount" parameterType="map" resultType="map">
		SELECT COUNT(DECODE(vidReplyLike, 1,1)) likeCount
		FROM vetReplyLike WHERE vidReplyNum = #{vidReplyNum}
	</select>
	
	
</mapper>